<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="proj.spring.mes.dao.mapper.P0401_StockMapperDAO">
	<!-- SQL문 작성 영역 -->
	
	<!-- 전체 조회 : 페이징 없는 기준 -->
	<select id = "selectStock" resultType = "P0401_StockDTO" parameterType="P0401_StockDTO">
		select
			s.stock_id, s.stock_amount, s.stock_wrap, s.item_id,
			i.item_div, i.item_name
		from v3_stock s left outer join v3_item i
		on s.item_id = i.item_id
		
		<where>
			<if test="stock_id != null and stock_id != ''">
				and lower(s.stock_id) like lower('%' || #{stock_id} || '%')
			</if>
			
			<if test="item_div != null and item_div != ''">
				and i.item_div = #{item_div}
			</if>
			
			<if test="stock_wrap != null and stock_wrap != ''">
				and s.stock_wrap = #{stock_wrap}
			</if>
		</where>
		order by s.stock_id	
	</select>
	<!-- 전체 조회 : 페이지 넣는 기준 -->
	<!-- <![CDATA[  ]]> : 대괄호 내의 내용은 그대로 문자열로 출력 -->
	<select id="selectStockPage" resultType="P0401_StockDTO">
	    <bind name="startRow" value="offset + 1"/>
	    <bind name="endRow"   value="offset + limit"/>
		SELECT *
		FROM (
		    SELECT t.*, ROWNUM rn
		    FROM
			(select
				s.stock_id, s.stock_amount, s.stock_wrap, s.item_id,
				i.item_div, i.item_name
			from v3_stock s left outer join v3_item i
			on s.item_id = i.item_id
			
			<where>
				<if test="filter.stock_id != null and filter.stock_id != ''">
					and lower(s.stock_id) like lower('%' || #{filter.stock_id} || '%')
				</if>
				
				<if test="filter.item_div != null and filter.item_div != ''">
					and i.item_div = #{filter.item_div}
				</if>
				
				<if test="filter.stock_wrap != null and filter.stock_wrap != ''">
					and s.stock_wrap = #{filter.stock_wrap}
				</if>
			</where>
			order by s.stock_id) t
	        <![CDATA[
	        WHERE ROWNUM <= #{endRow}
	        ]]>
	        )
		    <![CDATA[
		    WHERE rn >= #{startRow}
		    ]]>		
	</select>
	
	  <!-- 총 레코드 수 -->
	  <select id="selectStockCount" parameterType="map" resultType="long">
	    SELECT COUNT(*)
	    from v3_stock s left outer join v3_item i
		on s.item_id = i.item_id
		<where>
			<if test="filter.stock_id != null and filter.stock_id != ''">
				and lower(s.stock_id) like lower('%' || #{filter.stock_id} || '%')
			</if>
			
			<if test="filter.item_div != null and filter.item_div != ''">
				and i.item_div = #{filter.item_div}
			</if>
			<if test="filter.stock_wrap != null and filter.stock_wrap != ''">
				and s.stock_wrap = #{filter.stock_wrap}
			</if>
		</where>
	  </select>
	
	<!-- 단일 조회 : 아마 ㅇㅋ -->
	<select id = "selectOneStock" resultType = "P0401_StockDTO">
		select
			s.stock_id, s.stock_amount, s.stock_wrap, s.item_id,
			i.item_div, i.item_name
		from v3_stock s left outer join v3_item i
		on s.item_id = i.item_id
		where s.stock_id = #{stock_id}
		order by s.stock_id	
	</select>
	
	<!-- 품목 조회용 -->
	<select id = "selectStockItem" resultType = "P0401_StockDTO">
		select
			item_id, item_div, item_name
		from v3_item
	</select>
	
	
	<!-- 수정 : 아마 ㅇㅋ-->
	<update id = "updateStock" parameterType = "P0401_StockDTO">
		update v3_stock
		set stock_amount = #{stock_amount},
			stock_wrap = #{stock_wrap},
			item_id = #{item_id}
		where stock_id = #{stock_id}
	</update>
	
<!-- 	삭제(개별) : 아마 ㅇㅋ -->
<!-- 	<delete id = "deleteStock" parameterType = "P0401_StockDTO"> -->
<!-- 		delete from v3_stock -->
<!-- 		where stock_id = #{stock_id} -->
<!-- 	</delete> -->
	
	<!-- 삭제(다중) : 다중 삭제는 parameterType을 DTO로 하면 안 됨 -->
	<delete id = "deleteStocks" parameterType = "java.util.List">
		delete from v3_stock
		where stock_id in
		<foreach item="id" collection="list" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
	
	<!-- 삽입 : 아마 ㅇㅋ -->
	<insert id = "insertStock" parameterType = "P0401_StockDTO">
		<selectKey keyProperty="stock_id" resultType="string" order="BEFORE">
		  select 'C' || TO_CHAR(SYSDATE, 'YYMMDD') || LPAD(stock_id_seq.NEXTVAL, 4, '0')
		  from dual
		</selectKey>
		
		insert into v3_stock (
			stock_id, stock_amount, stock_wrap, item_id
		)
		values (
			#{stock_id}, #{stock_amount}, #{stock_wrap}, #{item_id}
		)
	</insert>
</mapper>